[[stdlib]]
=== 표준 라이브러리

파이썬 표준 라이브러리는 파이썬을 설치할 때 항상 함께 설치되는 많은 수의 유용한 모듈들을 말합니다.
파이썬 표준 라이브러리에 익숙해지면 이를 이용해 해결할 수 있는 많은 문제들을 좀 더 빠르고 쉽게
해결할 수 있습니다.

지금부터 표준 라이브러리에 포함된 많은 모듈 중에서 자주 사용되는 몇가지 모듈에 대해 알아볼 것입니다.
파이썬 표준 라이브러리에 포함된 모든 모듈에 대한 자세한 설명은 파이썬과 함께 설치되는 설명서의
http://docs.python.org/2/library/['라이브러리 레퍼런스' 섹션] 에서 확인해 보실 수 있습니다.

여기서는 유용한 몇 개의 모듈만 다뤄 보겠습니다.

CAUTION: 이 장에서 다루는 내용은 조금 어려울 수 있습니다. 그런 경우 일단 이 장을 읽지 말고 넘기세요.
그렇지만 여러분이 파이썬에 좀 더 익숙해지게 되면 이 장으로 다시 돌아오기를 강력히 권합니다.

=== +sys+ 모듈

`sys` 모듈에는 시스템의 기능을 다루는 여러 함수들이 들어 있습니다. 예를 들어 `sys.argv` 리스트에는
명령줄 인수들이 들어 있습니다.

또 `sys` 모듈을 통해 현재 사용하고 있는 파이썬의 버전을 알아올 수 있습니다.

--------------------------------------------------
$ python
>>> import sys
>>> sys.version_info
sys.version_info(major=2, minor=7, micro=6, releaselevel='final', serial=0)
>>> sys.version_info.major == 2
True
--------------------------------------------------

.동작 원리

`sys` 모듈에는 `version_info` 라고 하는 파이썬의 버전 정보가 담겨 있는 튜플이 들어 있습니다.첫 번째
항목은 주 버전을 의미합니다. 이제 이 정보를 읽어와 사용할 수 있습니다.

[[logging]]
=== logging 모듈

여러분이 디버그를 할 때 중간에 변수들의 내용 등을 출력하고 싶거나 혹은 실행시 중요한 메시지를 어딘가에
저장해 두게 하여 여러분의 프로그램이 제대로 실행되고 있는 지 확인하고 싶을 때 어떻게 하면 좋을까요?
어떻게 이러한 메시지들을 "어딘가에 저장해" 둘 수 있을까요? 이를 위해 `logging` 모듈을 사용합니다.

`stdlib_logging.py` 로 저장하세요:

[source,python]
--------------------------------------------------
include::programs/stdlib_logging.py[]
--------------------------------------------------

출력 예시:

--------------------------------------------------
include::programs/stdlib_logging.txt[]
--------------------------------------------------

여러분의 명령행 환경에서 `cat` 명령을 사용할 수 없을 경우, 아무 텍스트 에디터에서나  `test.log`
파일을 열어서 내용을 확인해 보실 수 있습니다.

.How It Works

We use three modules from the standard library - the `os` module for interacting with the operating
system, the `platform` module for information about the platform i.e. the operating system and the
`logging` module to *log* information.

First, we check which operating system we are using by checking the string returned by
`platform.platform()` (for more information, see `import platform; help(platform)`). If it is
Windows, we figure out the home drive, the home folder and the filename where we want to store the
information. Putting these three parts together, we get the full location of the file. For other
platforms, we need to know just the home folder of the user and we get the full location of the
file.

We use the `os.path.join()` function to put these three parts of the location together. The reason
to use a special function rather than just adding the strings together is because this function
will ensure the full location matches the format expected by the operating system.

We configure the `logging` module to write all the messages in a particular format to the file we
have specified.

Finally, we can put messages that are either meant for debugging, information, warning or even
critical messages. Once the program has run, we can check this file and we will know what happened
in the program, even though no information was displayed to the user running the program.

[[motw]]
=== Module of the Week Series

There is much more to be explored in the standard library such as
http://docs.python.org/2/library/pdb.html[debugging],
http://docs.python.org/2/library/argparse.html[handling command line options],
http://docs.python.org/2/library/re.html[regular expressions] and so
on.

The best way to further explore the standard library is to read Doug Hellmann's excellent
http://pymotw.com/2/contents.html[Python Module of the Week] series (also available as a
http://amzn.com/0321767349[book]) and reading the http://docs.python.org/2/[Python documentation].

=== Summary

We have explored some of the functionality of many modules in the Python Standard Library. It is
highly recommended to browse through the http://docs.python.org/2/library/[Python Standard Library
documentation] to get an idea of all the modules that are available.

Next, we will cover various aspects of Python that will make our tour of Python more _complete_.
