[[preface]]
[preface]
== 서문

파이썬은 간단하면서도 강력한, 몇 안되는 프로그래밍 언어들 중 하나일 것입니다.
파이썬은 초보자는 물론 숙련자에게도 잘 어울리지만, 가장 중요한 점은, 파이썬으로 프로그래밍 하는 것은 즐겁습니다.
이 책은 당신이 파이썬이라는 아름다운 프로그래밍 언어를 배우고,
당신이 하려는 일을 빠르고 쉽게 해결하는 방법을 보여드리는 것을 목적으로 작성되었습니다.

=== 이 책은 누가 읽으면 좋을까요?

이 책은 파이썬의 가이드 혹은 튜토리얼의 역할을 하도록 작성되었습니다.
프로그래밍에 대해 아무런 지식이 없는 '완전 초보자'들을 주 독자로 설정하였습니다.
물론 경험이 많은 프로그래머들에게도 유용한 책입니다.

이 책의 목표는 컴퓨터로 텍스트 문서를 저장하는 것밖에 모르는 사람도 이 책을 통해
파이썬을 배울 수 있도록 하는 것입니다. 물론 당신이 이전에 프로그래밍 경험이 있다고 하더라도,
이 책을 통해 파이썬을 익힐 수 있을 것입니다.

만약 당신이 프로그래밍 경험을 가지고 있다면, 아마도 당신은 당신이 가장 좋아하는 언어와 파이썬의
차이점에 관심을 갖게 될 것입니다. 저는 이 책에서 다른 언어와 파이썬과의 많은 차이점을 강조해 두었습니다.
작은 주의를 드리자면, 얼마 안 지나서 당신이 가장 좋아하는 언어는 파이썬이 될 것입니다!

[[history_lesson]]
=== History Lesson

I first started with Python when I needed to write an installer for software I had written called
'Diamond' so that I could make the installation easy. I had to choose between Python and Perl
bindings for the Qt library. I did some research on the web and I came across
http://www.python.org/about/success/esr/[an article by Eric S. Raymond], a famous and respected
hacker, where he talked about how Python had become his favorite programming language. I also found
out that the PyQt bindings were more mature compared to Perl-Qt. So, I decided that Python was the
language for me.

Then, I started searching for a good book on Python. I couldn't find any!  I did find some O'Reilly
books but they were either too expensive or were more like a reference manual than a guide. So, I
settled for the documentation that came with Python. However, it was too brief and small. It did
give a good idea about Python but was not complete. I managed with it since I had previous
programming experience, but it was unsuitable for newbies.

About six months after my first brush with Python, I installed the (then) latest Red Hat 9.0 Linux
and I was playing around with KWord. I got excited about it and suddenly got the idea of writing
some stuff on Python. I started writing a few pages but it quickly became 30 pages long. Then, I
became serious about making it more useful in a book form. After a _lot_ of rewrites, it has
reached a stage where it has become a useful guide to learning the Python language.  I consider
this book to be my contribution and tribute to the open source community.

This book started out as my personal notes on Python and I still consider it in the same way,
although I've taken a lot of effort to make it more palatable to others :)

In the true spirit of open source, I have received lots of constructive suggestions, criticisms and
<<who_reads_bop,feedback>> from enthusiastic readers which has helped me improve this book a lot.

=== Status Of The Book

- Latest update of this book was in Mar-Apr 2014, converted to
  http://asciidoctor.org/docs/what-is-asciidoc/[Asciidoc] using
  http://swaroopch.com/2013/10/17/emacs-configuration-tutorial/[Emacs 24] and
  https://github.com/sensorflo/adoc-mode/wiki[adoc-mode].
- In Dec 2008, the book was updated for the Python 3.0 release (one of the first books to do
  so). But now, I have converted the book back for Python 2 language because readers would often
  get confused between the default Python 2 installed on their systems vs. Python 3 which they had
  to separately install and all the tooling, esp. editors would assume Python 2 as well. I had a
  hard time justifying why I had to aggravate readers and make them go through all this when the
  fact is that they can learn either one and it would be just as useful. So, Python 2 it is.

The book needs the help of its readers such as yourselves to point out any parts of the book which
are not good, not comprehensible or are simply wrong. Please {contact}[write to the main author] or
the respective <<translations,translators>> with your comments and suggestions.

=== 공식 홈페이지

The official website of the book is {homepage} where you can read the whole book online, download
the latest versions of the book, {buy}[buy a printed hard copy] and also send me feedback.

=== 생각할 것들

[quote,C. A. R. Hoare]
__________________________________________________
There are two ways of constructing a software design: one way is to make it so simple that there
are obviously no deficiencies; the other is to make it so complicated that there are no obvious
deficiencies.
__________________________________________________

[quote,C. W. Wendte]
__________________________________________________
Success in life is a matter not so much of talent and opportunity as of concentration and
perseverance.
__________________________________________________
