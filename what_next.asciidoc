[[What Next]]

이 책의 내용을 잘 따라오셨다면 지금까지 많은 파이썬 프로그램을 작성해 보셨을 것이며,
아마 파이썬에 대한 느낌도 좀 더 편안할 것이고 파이썬에 좀 더 친숙해 졌을 것입니다. 또 이 책의
예제 프로그램 이외에도 이것저것 다른 것들도 시도해 보신 분들도 계시겠죠. 혹시 아니라면,
지금이라도 그렇게 하셔야 합니다. 자, 이제 남은 질문은 하나입니다. '앞으로 무엇을 해 보면 좋을까요?'

아래 문제를 한번 해결해 보시기 바랍니다:

__________________________________________________
명령줄에서 실행되는 *주소록* 프로그램을 만들어 보세요. 여기에는 친구, 가족, 동료 등을 카테고리별로
나눠 저장해 두며, 또 항목을 검색하거나 새로 추가 혹은 삭제할 수 있고 각 사람의 메일 주소, 전화번호
등의 정보를 담을 수 있도록 하세요. 또한 이러한 정보들을 저장해 두었다가 언제든 불러와 사용할 수
있게 하세요.
__________________________________________________

지금까지 살펴본 다양한 내용들을 다시 되짚어 보면 위 문제 정도는 쉽게 해결할 수 있을 것입니다.
힌트를 원하신다면 아래 꼬리말을 참조하세요:[각 사람의 정보를 담는 클래스를 하나 만드세요.
사전을 이용하여 각 사람의 이름을 키로 하여 각 객체를 저장해 둡니다. 또 pickle 모듈을 사용하여
객체를 여러분의 하드 디스크에 저장해 두세요. 또 사전의 내장 메소드를 이용하여 사람을 추가하고
삭제하거나 수정하는 기능을 구현하세요.].

위 문제를 성공적으로 해결하셨다면, 어러분은 이제 파이썬 프로그래라고 불러도 손색이 없을 것입니다.
이제 저에게 이런 좋은 책을 써서 고맙다는 http://swaroopch.com/contact/[메일 한 통만 보내 주세요] 
;-). 또, 이 책의 지속적인 발전을 위해 http://swaroopch.com/buybook/[책을 구입하시는 것도 고려해 주세요].

위 문제가 너무 쉬웠다면, 아래 문제도 해결해 보시기 바랍니다:

__________________________________________________
http://unixhelp.ed.ac.uk/CGI/man-cgi?replace[replace 명령]을 직접 구현해 보세요. 이 명령은
주어진 파일들 내부의 특정 문자열을 다른 문자열로 전부 치환하는 데 사용됩니다.
__________________________________________________

여러분의 의향에 따라 구현은 단순히 문자열을 치환해 주는 식으로 구현될 수도 있고 패턴 검색 (정규
표현식)을 통해 좀 더 유연하게 구현될 수도 있습니다.

=== 더 많은 과제

위 문제들이 너무 쉬웠다면, 다음 사이트에 주어진 과제들을 프로그램으로 구현해 보시기 바랍니다:
https://github.com/thekarangoel/Projects#numbers
(또는 http://www.dreamincode.net/forums/topic/78802-martyr2s-mega-project-ideas-list/[Martyr2의 Mega Project List])

또 https://openhatch.org/wiki/Intermediate_Python_Workshop/Projects[파이썬 중급 과제 목록]
도 확인해 보시기 바랍니다.

=== 예제 코드 읽기

프로그래밍 언어를 배우는 가장 좋은 방법은 코드를 직접 많이 써보고 또 많이 읽는 것입니다:

- http://code.activestate.com/recipes/langs/python/[Python Cookbook] 은 파이썬을 이용하여 어떤
  문제를 해결할 때 유용한 해결 방법과 팁을 정리해 놓은 굉장히 좋은 사이트입니다. 파이썬 사용자라면
  반드시 한번쯤 읽어 볼 필요가 있습니다.

- http://pymotw.com/2/contents.html[금주의 파이썬 모듈] 도 또한 한번쯤 읽어 봐야 할,
  또 다른 매우 잘 쓰여진 <<stdlib, 표준 라이브러리>> 가이드입니다.

=== 참고 문서

- http://docs.python-guide.org/en/latest/[파이썬을 여행하는 히치하이커를 위한 안내서(The Hitchhiker's Guide to Python!)]
- http://slott-softwarearchitect.blogspot.ca/2013/06/python-big-picture-whats-roadmap.html[파이썬의 큰 그림(Python Big Picture)]
- http://www.jeffknupp.com/writing-idiomatic-python-ebook/[전자책 "Writing Idiomatic Python"] (유료)

=== 파이썬 관련 동영상

- http://www.pyvideo.org[PyVideo]

=== 질문과 답변

- http://docs.python.org/3/howto/doanddont.html[Official Python Dos and Don'ts]
- http://www.python.org/doc/faq/general/[Official Python FAQ]
- http://norvig.com/python-iaq.html[Norvig's list of Infrequently Asked Questions]
- http://dev.fyicenter.com/Interview-Questions/Python/index.html[Python Interview Q & A]
- http://stackoverflow.com/questions/tagged/python[StackOverflow questions tagged with python]

=== 튜토리얼

- http://stackoverflow.com/q/101268/4869[Hidden features of Python]
- http://www.reddit.com/r/Python/comments/19dir2/whats_the_one_code_snippetpython_tricketc_did_you/[What's the one code snippet/python trick/etc did you wish you knew when you learned python?]
- http://www.awaretek.com/tutorials.html[Awaretek's comprehensive list of Python tutorials]

=== 커뮤니티

파이썬을 사용하다가 도저히 해결하지 못할 문제에 직면한 경우,
http://mail.python.org/mailman/listinfo/tutor[python-tutor list (영문)] 혹은
http://python.kr/[파이썬 마을(한글)] 에 질문하시면 좋습니다.

질문하기 전에 먼저 직접 문제를 해결하려고 노력해 보신 후에 질문하시기 바라며, 다음을 읽어 보시기 바랍니다:
http://catb.org/~esr/faqs/smart-questions.html[좋은 질문을 하는 방법(영문)]

=== 새로운 소식

파이썬 세계에서 벌어지고 있는 최신 정보들을 접하고 싶으시면 
http://planet.python.org[공식 Python Planet 사이트 (영문)] 을 확인하세요.

=== 라이브러리 설치하기


http://pypi.python.org/pypi[파이썬 패키지 목록 (Python Package Index)]에 여러분의 프로그램에서
사용할 수 있는 수많은 오픈 소스 라이브러리가 존재합니다.

이 라이브러리들을 쉽게 설치하고 사용하기 위해서, http://www.pip-installer.org/en/latest/[pip]
를 사용할 수 있습니다.

=== 홈페이지 제작

http://flask.pocoo.org[플라스크(Flask)]를 이용하여 홈페이지를 만들 수 있습니다. 다음을 읽어 보세요:

- http://flask.pocoo.org/docs/quickstart/[Flask Official Quickstart]
- http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world[The Flask Mega-Tutorial]
- https://github.com/mitsuhiko/flask/tree/master/examples[Example Flask Projects]

=== GUI 프로그램 만들기

파이썬 바인딩을 제공하는 여러 GUI(Graphical User Interface) 라이브러리를 사용하여 GUI 프로그램을
제작할 수 있습니다. 바인딩이란 C, C++ 혹은 다른 언어로 제작된 라이브러리를 파이썬에서 불러와
사용할 수 있도록 하는 일종의 연결 모듈을 말합니다.

다음은 파이썬에서 사용할 수 있는 GUI 라이브러리 목록입니다:

Kivy ::
http://kivy.org

PyGTK ::
이것은 GNOME을 제작할 때 사용된 GTK+ 의 파이썬 바인딩입니다. GTK+은 처음에는 사용하기 불편할 수
있지만 한번 익숙해지면 GUI 프로그램을 빠르게 제작할 수 있게 됩니다. 이 때 Glade 라는 디자인 도구를
많이 사용합니다. GTK+ 를 사용하여 자유/독점 소프트웨어를 모두 작성할 수 있습니다. PyGTK를 사용하시려면
http://www.pygtk.org/tutorial.html[PyGTK 튜토리얼]을 읽어 보세요.

PyQt ::
이것은 KDE을 제작할 때 사용된 Qt 의 파이썬 바인딩입니다. Qt는 Qt Designer라는 디자인 도구 덕택에
굉장히 사용이 쉽고 강력하며 
This is the Python binding for the Qt toolkit which is the foundation upon which the KDE is
built. Qt is extremely easy to use and very powerful especially due to the Qt Designer and the
amazing Qt documentation. PyQt is free if you want to create open source (GPL'ed) software and you
need to buy it if you want to create proprietary closed source software. Starting with Qt 4.5 you
can use it to create non-GPL software as well. To get started, read about
http://qt-project.org/wiki/PySide[PySide].

wxPython ::

This is the Python bindings for the wxWidgets toolkit. wxPython has a learning curve associated
with it. However, it is very portable and runs on GNU/Linux, Windows, Mac and even embedded
platforms. There are many IDEs available for wxPython which include GUI designers as well such as
http://spe.pycs.net/[SPE (Stani's Python Editor)] and the http://wxglade.sourceforge.net/[wxGlade]
GUI builder. You can create free as well as proprietary software using wxPython. To get started,
read the http://zetcode.com/wxpython/[wxPython tutorial].

=== Summary of GUI Tools

For more choices, see the http://www.python.org/cgi-bin/moinmoin/GuiProgramming[GuiProgramming wiki
page at the official python website].

Unfortunately, there is no one standard GUI tool for Python. I suggest that you choose one of the
above tools depending on your situation. The first factor is whether you are willing to pay to use
any of the GUI tools. The second factor is whether you want the program to run only on Windows or
on Mac and GNU/Linux or all of them. The third factor, if GNU/Linux is a chosen platform, is
whether you are a KDE or GNOME user on GNU/Linux.

For a more detailed and comprehensive analysis, see Page 26 of the
http://archive.pythonpapers.org/ThePythonPapersVolume3Issue1.pdf['The Python Papers, Volume 3, Issue 1'].

=== Various Implementations

There are usually two parts a programming language - the language and the software. A language is
_how_ you write something. The software is _what_ actually runs our programs.

We have been using the _CPython_ software to run our programs. It is referred to as CPython because
it is written in the C language and is the _Classical Python interpreter_.

There are also other software that can run your Python programs:

http://www.jython.org[Jython] ::
A Python implementation that runs on the Java platform. This means you can use Java libraries and
classes from within Python language and vice-versa.

http://www.codeplex.com/Wiki/View.aspx?ProjectName=IronPython[IronPython] ::
A Python implementation that runs on the .NET platform. This means you can use .NET libraries and
classes from within Python language and vice-versa.

http://codespeak.net/pypy/dist/pypy/doc/home.html[PyPy] ::
A Python implementation written in Python! This is a research project to make it fast and easy to
improve the interpreter since the interpreter itself is written in a dynamic language (as opposed
to static languages such as C, Java or C# in the above three implementations)

There are also others such as http://common-lisp.net/project/clpython/[CLPython] - a Python
implementation written in Common Lisp and http://brython.info/[Brython] which is an implementation
on top of a JavaScript interpreter which could mean that you can use Python (instead of JavaScript)
to write your web-browser ("Ajax") programs.

Each of these implementations have their specialized areas where they are useful.

[[functional_programming]]
=== Functional Programming (for advanced readers)

When you start writing larger programs, you should definitely learn more about a functional
approach to programming as opposed to the class-based approach to programming that we learned in
the <<oop,object oriented programming chapter>>:

- http://docs.python.org/3/howto/functional.html[Functional Programming Howto by A.M. Kuchling]
- http://www.diveintopython.net/functional_programming/index.html[Functional programming chapter in 'Dive Into Python' book]
- http://ua.pycon.org/static/talks/kachayev/index.html[Functional Programming with Python presentation]

=== Summary

We have now come to the end of this book but, as they say, this is the _the beginning of the
end_!. You are now an avid Python user and you are no doubt ready to solve many problems using
Python. You can start automating your computer to do all kinds of previously unimaginable things or
write your own games and much much more. So, get started!
